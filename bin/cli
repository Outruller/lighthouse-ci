#!/usr/bin/env node

/**
 *  Copyright (c) 2018 AndreaSonny <andreasonny83@gmail.com> (https://github.com/andreasonny83)
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */

'use strict';
const fs = require('fs');
const path = require('path');
const meow = require('meow');

const { getChromeFlags } = require('../lib/config');
const lighthouseReporter = require('../lib/lighthouse-reporter');

const cli = meow(
  `
  Usage
    $ lighthouse-ci <target-url>

  Powershell examples
    $ lighthouse-ci https://example.com/
    $ lighthouse-ci https://example.com/ --report="<file path>"
    $ lighthouse-ci https://example.com/ --validate="{\`\\\`"audits\`\\\`":[{\`\\\`"id\`\\\`":\`\\\`"first-contentful-paint\`\\\`"\`,\`\\\`"warn\`\\\`":3000\`,\`\\\`"error\`\\\`":5000}]}"
    $ lighthouse-ci https://example.com/ --validate="{\`\\\`"categories\`\\\`":[{\`\\\`"id\`\\\`":\`\\\`"performance\`\\\`"\`,\`\\\`"warn\`\\\`":0.5\`,\`\\\`"error\`\\\`":0.25}]}"

  Options
    --report=<file path>          HTML report file path
    --validate="<json>"             JSON string with validation
      {
        "audits: [
          {"id": "<audit id>", "expect": <boolean>},
          {"id": "<audit id>", "warn": <number 0..1>, "error": <number 0..1>}
        ],
        "categories": [
          {"id": "<category id>", "warn": <number 0..1>, "error": <number 0..1>}
        ],
      }

  In addition to listed "lighthouse-ci" configuration flags, it is also possible to pass any native "lighthouse" flag.
  To see the full list of available flags, please refer to the official Google Lighthouse documentation at https://github.com/GoogleChrome/lighthouse#cli-options
`,
  {
    flags: {
      report: {
        type: 'string',
      },
      validate: {
        type: 'string',
        alias: 'v',
        default: "",
      },
    },
  },
);

const {
  report,
  validate,
  ...lighthouseFlags
} = cli.flags;

const flags = {
  report,
  validate: validate && JSON.parse(validate),
};

function init(args, chromeFlags) {
  const testUrl = args[0];

  // Run Google Lighthouse
  return lighthouseReporter(testUrl, flags, chromeFlags, lighthouseFlags).then(
    async ({ ciReport, validationReport, htmlReport }) => {

      if (flags.report) {
        const outputPath = path.resolve(flags.report);

        await fs.writeFileSync(outputPath, htmlReport);
      }

      return { ciReport, validationReport };
    },
  );
}

Promise.resolve()
  .then(() => {
    if (cli.input.length === 0) {
      return cli.showHelp();
    }

    console.log(`Running Lighthouse on ${cli.input} ...\n`);

    return init(cli.input, getChromeFlags());
  })
  .then(({ ciReport, validationReport }) => {
    for (const category in ciReport) {
      if (!ciReport[category]) {
        continue;
      }

      console.info(`\t${category}: ${Math.round(ciReport[category] * 100)}`);
    }

    return validationReport;
  })
  .then(validationReport => {
    if (!validationReport) {
      return process.exit(0);
    }

    let failPipeline = false;

    const categories = validationReport.categories;
    if (categories && categories.length > 0) {
      console.log("\n\tValidating categories:\n");
      for (const category of categories) {
        const score = Number(category.score);
        const warn = Number(category.warn);
        const error = Number(category.error);
        const categoryScoreString = `\t\t${category.id}: ${Math.round(category.score * 100)}`;

        if (score > warn) {
          console.info(categoryScoreString + ' - ok');
        } else if (score > error && score <= warn) {
          console.warn(categoryScoreString + ' - warning');
        } else {
          failPipeline = true;
          console.error(categoryScoreString + ' - failed');
        }
      }
    }

    const audits = validationReport.audits;
    if (audits && audits.length > 0) {
      console.log("\n\tValidating audits:\n");
      for (const audit of audits) {

        const value = audit.rawValue;
        switch (typeof value) {
          case "number":
            const warn = Number(audit.warn);
            const error = Number(audit.error);
            const auditNumberValueString = `\t\t${audit.id}: ${audit.displayValue}`;

            if (value < warn) {
              console.info(auditNumberValueString + ' - ok');
            } else if (value >= warn && value < error) {
              console.warn(auditNumberValueString + ' - warning');
            } else {
              console.error(auditNumberValueString + ' - failed');
              failPipeline = true;
            }
            break;
          case "boolean":
            const expect = Boolean(audit.expect);
            const auditBooleanValueString = `\t\t${audit.id}`;

            if (value === expect) {
              console.info(auditBooleanValueString + ' - ok');
            } else {
              console.error(auditBooleanValueString + ' - failed');
              failPipeline = true;
            }
            break;
        }
      }
    }

    if (!failPipeline) {
      console.log('\nValidation successful.\n');
      return process.exit(0);
    }

    console.error('\nValidation failed.\n');
    return process.exit(1);
  })
  .catch(err => {
    console.error(err);
    return process.exit(1);
  });
